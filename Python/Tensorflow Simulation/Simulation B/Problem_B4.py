# -*- coding: utf-8 -*-
"""PROBLEM B4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OjHL4fdpxZBGiEU6uQ1MhpYiyROFW9yj
"""

# ===================================================================================================
# PROBLEM B4
#
# Build and train a classifier for the BBC-text dataset.
# This is a multiclass classification problem.
# Do not use lambda layers in your model.
#
# The dataset used in this problem is originally published in: http://mlg.ucd.ie/datasets/bbc.html.
#
# Desired accuracy and validation_accuracy > 91%
# ===================================================================================================

from sklearn.model_selection import train_test_split
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
import tensorflow as tf
import pandas as pd
import numpy as np

class myCallback(tf.keras.callbacks.Callback):
      def on_epoch_end(self, epoch, logs={}):
        if(logs.get('val_accuracy')>0.93):
          print("\nReached 93% validation accuracy so cancelling training!")
          self.model.stop_training = True

def solution_B4():
    bbc = pd.read_csv('https://github.com/dicodingacademy/assets/raw/main/Simulation/machine_learning/bbc-text.csv')

    # DO NOT CHANGE THIS CODE
    # Make sure you used all of these parameters or you can not pass this test
    vocab_size = 1000
    embedding_dim = 16
    max_length = 120
    trunc_type = 'post'
    padding_type = 'post'
    oov_tok = "<OOV>"
    training_portion = .8

    # YOUR CODE HERE
    # Using "shuffle=False"

    training_sentences, validation_sentences = train_test_split(
        bbc['text'], train_size=training_portion, shuffle=False)
    training_labels, validation_labels = train_test_split(
        bbc['category'], train_size=training_portion, shuffle=False)

    # Fit your tokenizer with training data
    tokenizer = Tokenizer(num_words=vocab_size, oov_token=oov_tok)
    tokenizer.fit_on_texts(training_sentences)

    sequences_train = tokenizer.texts_to_sequences(training_sentences)
    sequences_val = tokenizer.texts_to_sequences(validation_sentences)
    padded_seq_train = pad_sequences(sequences_train,truncating=trunc_type,maxlen=max_length,padding=padding_type)
    padded_seq_val = pad_sequences(sequences_val,truncating=trunc_type,maxlen=max_length,padding=padding_type)

    # You can also use Tokenizer to encode your label.
    tokenizer_labels = Tokenizer()
    tokenizer_labels.fit_on_texts(bbc['category'])

    training_label_seq = tokenizer_labels.texts_to_sequences(training_labels)
    validation_label_seq = tokenizer_labels.texts_to_sequences(validation_labels)

    training_label_seq = np.array(training_label_seq)
    validation_label_seq = np.array(validation_label_seq)

    model = tf.keras.Sequential([
        tf.keras.layers.Embedding(vocab_size, embedding_dim, input_length=max_length),
        tf.keras.layers.GlobalAveragePooling1D(),
        tf.keras.layers.Dense(90, activation='relu'),
        tf.keras.layers.Dense(6, activation='softmax')
    ])

    # Make sure you are using "sparse_categorical_crossentropy" as a loss fuction
    model.compile(loss='sparse_categorical_crossentropy',
                  optimizer='adam',
                  metrics=['accuracy'])

    model.fit(padded_seq_train, training_label_seq, epochs=30, validation_data=(padded_seq_val, validation_label_seq), callbacks=myCallback())


    return model

    # The code below is to save your model as a .h5 file.
    # It will be saved automatically in your Submission folder.
if __name__ == '__main__':
    # DO NOT CHANGE THIS CODE
    model = solution_B4()
    model.save("model_B4.h5")
