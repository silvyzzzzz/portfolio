# -*- coding: utf-8 -*-
"""PROBLEM C4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jqwmJVdQvLmptiT63LRSF5XavHySjJx8
"""

# =====================================================================================================
# PROBLEM C4
#
# Build and train a classifier for the sarcasm dataset.
# The classifier should have a final layer with 1 neuron activated by sigmoid.
#
# Do not use lambda layers in your model.
#
# Dataset used in this problem is built by Rishabh Misra (https://rishabhmisra.github.io/publications).
#
# Desired accuracy and validation_accuracy > 75%
# =======================================================================================================

import json
import tensorflow as tf
import numpy as np
import urllib
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences

class myCallback(tf.keras.callbacks.Callback):
      def on_epoch_end(self, epoch, logs={}):
        if(logs.get('val_accuracy')>0.81):
          print("\nReached 81% validation accuracy so cancelling training!")
          self.model.stop_training = True

def solution_C4():
    data_url = 'https://github.com/dicodingacademy/assets/raw/main/Simulation/machine_learning/sarcasm.json'
    urllib.request.urlretrieve(data_url, 'sarcasm.json')

    # DO NOT CHANGE THIS CODE
    # Make sure you used all of these parameters or test may fail
    vocab_size = 1000
    embedding_dim = 16
    max_length = 120
    trunc_type = 'post'
    padding_type = 'post'
    oov_tok = "<OOV>"
    training_size = 20000

    sentences = []
    labels = []
    # YOUR CODE HERE
    with open('sarcasm.json') as jsonfile:
        data = json.load(jsonfile)
        for item in data:
            labels.append(item["is_sarcastic"])
            sentences.append(item["headline"])

    labels = np.array(labels)
    sentences = np.array(sentences)

    # Splitting data
    # training data
    train_sentences = sentences[:training_size]
    train_labels = labels[:training_size]
    # validation data
    validation_sentences = sentences[training_size:]
    validation_labels = labels[training_size:]

    # Fit your tokenizer with training data
    tokenizer = Tokenizer(num_words=vocab_size, oov_token=oov_tok)
    tokenizer.fit_on_texts(train_sentences)

    # seq and pad
    sequences_train = tokenizer.texts_to_sequences(train_sentences)
    sequences_val = tokenizer.texts_to_sequences(validation_sentences)
    padded_seq_train = pad_sequences(sequences_train,truncating=trunc_type,maxlen=max_length,padding=padding_type)
    padded_seq_val = pad_sequences(sequences_val,truncating=trunc_type,maxlen=max_length,padding=padding_type)


    model = tf.keras.Sequential([
        tf.keras.layers.Embedding(vocab_size, embedding_dim, input_length=max_length),
        tf.keras.layers.GlobalAveragePooling1D(),
        tf.keras.layers.Dense(90, activation='relu'),
        tf.keras.layers.Dense(1, activation='sigmoid')
    ])

    model.compile(loss='binary_crossentropy',
                  optimizer='adam',
                  metrics=['accuracy'])

    model.fit(padded_seq_train, train_labels, epochs=30, validation_data=(padded_seq_val, validation_labels), callbacks=myCallback())

    return model


# The code below is to save your model as a .h5 file.
# It will be saved automatically in your Submission folder.
if __name__ == '__main__':
    # DO NOT CHANGE THIS CODE
    model = solution_C4()
    model.save("model_C4.h5")